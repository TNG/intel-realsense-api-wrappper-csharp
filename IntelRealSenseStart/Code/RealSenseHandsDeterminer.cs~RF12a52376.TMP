using System;
using System.Threading;

namespace IntelRealSenseStart.Code
{
    internal class RealSenseHandsDeterminer
    {
        private Thread realSenseDeterminerThread;
        private PXCMSenseManager realSenseManager;
        private PXCMHandData handData;

        private volatile bool stopped;

        public RealSenseHandsDeterminer()
        {
            stopped = true;
        }

        public bool Started
        {
            get { return !stopped; }
        }

        public void Start()
        {
            if (!stopped)
            {
                throw new Exception("The hands determiner is already started");
            }

            Console.WriteLine(@"Starting determiner thread");
            stopped = false;
            realSenseDeterminerThread = new Thread(InitializeRealSense);
            realSenseDeterminerThread.Start();
        }

        private void InitializeRealSense()
        {
            Console.WriteLine(@"Started determiner thread");
            TryToRunHandDetection();
        }

        private void TryToRunHandDetection()
        {
            CreateRealSenseManager();
            Console.WriteLine(@"Created RealSense manager");

            ConfigureDevice();
            ConfigureHandDetection();

            InitializeRealSenseManager();
            Console.WriteLine(@"Initialized RealSense detection");

            StartHandDetection();

            realSenseManager.Close();
            Console.WriteLine(@"Closed RealSense detection");
        }

        private void CreateRealSenseManager()
        {
            realSenseManager = PXCMSession.CreateInstance().CreateSenseManager();
            realSenseManager.EnableHand();
        }

        private void ConfigureDevice()
        {
            PXCMCapture.DeviceInfo dinfo;
            realSenseManager.QueryCaptureManager().QueryDevice().QueryDeviceInfo(out dinfo);

            if (dinfo == null || dinfo.model != PXCMCapture.DeviceModel.DEVICE_MODEL_IVCAM)
            {
                throw new Exception("No device info found");
            }

            realSenseManager.captureManager.device.SetDepthConfidenceThreshold(1);
            realSenseManager.captureManager.device.SetMirrorMode(PXCMCapture.Device.MirrorMode.MIRROR_MODE_DISABLED);
            realSenseManager.captureManager.device.SetIVCAMFilterOption(6);
        }

        private void ConfigureHandDetection()
        {
            PXCMHandModule handModule = realSenseManager.QueryHand();
            PXCMHandConfiguration handConfiguration = handModule.CreateActiveConfiguration();
            handData = handModule.CreateOutput();

            ConfigureHandOptions(handConfiguration);

            handConfiguration.ApplyChanges();
            handConfiguration.Update();

            Console.WriteLine(@"Created hand configuration");
        }

        private void ConfigureHandOptions(PXCMHandConfiguration handConfiguration)
        {
            handConfiguration.DisableAllGestures();
            handConfiguration.EnableSegmentationImage(true);
        }

        private void InitializeRealSenseManager()
        {
            realSenseManager.Init();
        }

        private void StartHandDetection()
        {
            while (!stopped && realSenseManager.AcquireFrame(true) >= pxcmStatus.PXCM_STATUS_NO_ERROR)
            {
                ProcessFrame();
                realSenseManager.ReleaseFrame();
            }
        }

        private void ProcessFrame()
        {
            PXCMCapture.Sample handSample = realSenseManager.QueryHandSample();
            if (handSample != null)
            {
                CreateAndProcessHandData(handSample);
            }
        }

        private void CreateAndProcessHandData(PXCMCapture.Sample handSample)
        {
            handData.Update();
            ProcessHand();
        }

        private void ProcessHand()
        {
            int numberOfHands = handData.QueryNumberOfHands();

            if (numberOfHands > 0)
            {
                int id;
                handData.QueryHandId(PXCMHandData.AccessOrderType.ACCESS_ORDER_BY_TIME, 0, out id);

                PXCMHandData.IHand oneHandData;
                handData.QueryHandData(PXCMHandData.AccessOrderType.ACCESS_ORDER_BY_TIME, 0, out oneHandData);

                CreateSegmentationImage(oneHandData);
            }
        }

        private void CreateSegmentationImage(PXCMHandData.IHand oneHandData)
        {
            PXCMImage handImage;
            pxcmStatus handImageStatus = oneHandData.QuerySegmentationImage(out handImage);
            if (handImageStatus >= pxcmStatus.PXCM_STATUS_NO_ERROR)
            {
                CopyDataToBitmap(handImage);
                handImage.Dispose();
            }
            else
            {
                Console.WriteLine(@"Error");
                //throw new Exception("Could not determine segmentation image");
            }
        }

        private void CopyDataToBitmap(PXCMImage handImage)
        {
            Console.WriteLine(@"Copy");
        }

        public void Stop()
        {
            if (stopped)
            {
                throw new Exception("The hands determiner is already stopped");
            }

            stopped = true;
            realSenseDeterminerThread.Join();
        }
    }
}